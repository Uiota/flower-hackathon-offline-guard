# Kubernetes Deployment for Offline Guard
# Scales from laptop to production

apiVersion: v1
kind: Namespace
metadata:
  name: offline-guard
  labels:
    app.kubernetes.io/name: offline-guard
    app.kubernetes.io/part-of: digital-sovereignty
    team.role/container-guardian: "welcome"
    team.role/orchestration-guardian: "needed"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-demo
  namespace: offline-guard
  labels:
    app: offline-guard
    component: frontend
    guardian-friendly: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: offline-guard
      component: frontend
  template:
    metadata:
      labels:
        app: offline-guard
        component: frontend
      annotations:
        team.role/suggestion: "Perfect for Mobile Master or Creative Guardian"
    spec:
      containers:
      - name: web-demo
        image: offline-guard-web:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: web-demo-service
  namespace: offline-guard
  labels:
    app: offline-guard
    component: frontend
spec:
  selector:
    app: offline-guard
    component: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discord-bot
  namespace: offline-guard
  labels:
    app: offline-guard
    component: bot
    role-priority: "high"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: offline-guard
      component: bot
  template:
    metadata:
      labels:
        app: offline-guard
        component: bot
      annotations:
        team.role/suggestion: "Great for Team Coordinator Guardian"
    spec:
      containers:
      - name: discord-bot
        image: offline-guard-bot:latest
        env:
        - name: DISCORD_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: discord-secrets
              key: bot-token
              optional: true
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-toolkit
  namespace: offline-guard
  labels:
    app: offline-guard
    component: ml
    flower-ai: "integrated"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: offline-guard
      component: ml
  template:
    metadata:
      labels:
        app: offline-guard
        component: ml
      annotations:
        team.role/suggestion: "Perfect for Federated Learner Guardian"
    spec:
      containers:
      - name: ml-toolkit
        image: offline-guard-ml:latest
        ports:
        - containerPort: 8888
        env:
        - name: JUPYTER_ENABLE_LAB
          value: "yes"
        - name: JUPYTER_TOKEN
          valueFrom:
            secretKeyRef:
              name: ml-secrets
              key: jupyter-token
              optional: true
        volumeMounts:
        - name: ml-data
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /
            port: 8888
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: ml-data
        persistentVolumeClaim:
          claimName: ml-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: ml-toolkit-service
  namespace: offline-guard
  labels:
    app: offline-guard
    component: ml
spec:
  selector:
    app: offline-guard
    component: ml
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-data-pvc
  namespace: offline-guard
  labels:
    app: offline-guard
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Guardian Character Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: guardian-service
  namespace: offline-guard
  labels:
    app: offline-guard
    component: guardian
    gamification: "enabled"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: offline-guard
      component: guardian
  template:
    metadata:
      labels:
        app: offline-guard
        component: guardian
      annotations:
        team.role/suggestion: "Perfect for Creative or UX Guardian"
    spec:
      containers:
      - name: guardian-service
        image: offline-guard-guardian:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: guardian-service
  namespace: offline-guard
  labels:
    app: offline-guard
    component: guardian
spec:
  selector:
    app: offline-guard
    component: guardian
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
  type: ClusterIP
---
# Redis for Guardian state
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: offline-guard
  labels:
    app: offline-guard
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: offline-guard
      component: cache
  template:
    metadata:
      labels:
        app: offline-guard
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: offline-guard
  labels:
    app: offline-guard
    component: cache
spec:
  selector:
    app: offline-guard
    component: cache
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: offline-guard-ingress
  namespace: offline-guard
  labels:
    app: offline-guard
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /
    team.role/needed: "Platform Guardian for SSL management"
spec:
  tls:
  - hosts:
    - offline-guard.dev
    secretName: offline-guard-tls
  rules:
  - host: offline-guard.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-demo-service
            port:
              number: 80
      - path: /ml
        pathType: Prefix
        backend:
          service:
            name: ml-toolkit-service
            port:
              number: 8888
      - path: /api/guardian
        pathType: Prefix
        backend:
          service:
            name: guardian-service
            port:
              number: 3001