# Security-Hardened Podman Compose for Offline Guard
# Implements rootless containers with defense-in-depth security

version: '3.8'

x-security-defaults: &security-defaults
  security_opt:
    - no-new-privileges=true
  read_only: true
  tmpfs:
    - /tmp:rw,noexec,nosuid,size=100m
  cap_drop:
    - ALL
  user: "1001:1001"
  
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '2.0'
      reservations:
        memory: 256M
        cpus: '0.25'

services:
  # Security-hardened web demo
  web-demo:
    <<: *security-defaults
    <<: *resource-limits
    build:
      context: .
      dockerfile: containers/web-demo/Containerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    ports:
      - "8080:8080"  # Non-privileged port
    volumes:
      - type: bind
        source: ./web-demo
        target: /usr/share/nginx/html
        read_only: true
        bind:
          selinux: Z
      - type: bind 
        source: ./landing-website
        target: /usr/share/nginx/html/landing
        read_only: true
        bind:
          selinux: Z
      - type: tmpfs
        target: /var/cache/nginx
        tmpfs:
          size: 50M
          mode: 0755
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - frontend
    labels:
      - "io.containers.autoupdate=registry"
      - "app=offline-guard"
      - "component=frontend"
      - "security.hardened=true"
      - "team.guardian=web-frontend"

  # Security-hardened Discord bot
  discord-bot:
    <<: *security-defaults
    build:
      context: .
      dockerfile: containers/discord-bot/Containerfile
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN:-demo_mode}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - type: bind
        source: ./team-building
        target: /app/team-building
        read_only: true
        bind:
          selinux: Z
    cap_add:
      - NET_BIND_SERVICE  # For health check server
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/health\")' || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "io.containers.autoupdate=registry"
      - "app=offline-guard"
      - "component=bot"
      - "security.hardened=true"
      - "team.guardian=coordination"

  # ML Toolkit with enhanced security
  ml-toolkit:
    <<: *security-defaults
    build:
      context: .
      dockerfile: containers/ml-toolkit/Containerfile
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-offline-guard-ml-secure}
      - JUPYTER_CONFIG_DIR=/home/mluser/.jupyter
    volumes:
      - type: volume
        source: ml-data
        target: /app/data
        volume:
          nocopy: false
      - type: tmpfs
        target: /home/mluser/.local
        tmpfs:
          size: 500M
          mode: 0755
    deploy:
      resources:
        limits:
          memory: 4G  # ML needs more memory
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/api || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # ML container needs more startup time
    restart: unless-stopped
    networks:
      - ml-network
    labels:
      - "io.containers.autoupdate=registry"
      - "app=offline-guard"
      - "component=ml"
      - "security.hardened=true"
      - "flower.enabled=true"
      - "team.guardian=ml-specialist"

  # Guardian Character Service - Security Focused
  guardian-service:
    <<: *security-defaults
    build:
      context: .
      dockerfile: containers/guardian-service/Containerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - GUARDIAN_SECRET_KEY=${GUARDIAN_SECRET_KEY:-generate-in-production}
    volumes:
      - type: volume
        source: guardian-data
        target: /app/data
        volume:
          nocopy: false
      - type: tmpfs
        target: /app/tmp
        tmpfs:
          size: 100M
          mode: 0755
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - backend
      - frontend  # Needs frontend access for API
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "io.containers.autoupdate=registry"
      - "app=offline-guard"
      - "component=guardian"
      - "security.hardened=true"
      - "gamification.enabled=true"
      - "team.guardian=character-system"

  # Redis with security hardening
  redis:
    image: redis:7-alpine
    <<: *security-defaults
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-offline-guard-redis}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - type: volume
        source: redis-data
        target: /data
        volume:
          nocopy: false
    ports: []  # No external access
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a $REDIS_PASSWORD ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'
    labels:
      - "app=offline-guard"
      - "component=cache"
      - "security.hardened=true"

  # Gitea Git Server - Collaboration Platform
  gitea:
    image: gitea/gitea:1.21-rootless
    environment:
      - USER_UID=1001
      - USER_GID=1001
      - GITEA__database__DB_TYPE=sqlite3
      - GITEA__database__PATH=/var/lib/gitea/data/gitea.db
      - GITEA__server__DOMAIN=${GITEA_DOMAIN:-localhost}
      - GITEA__server__SSH_PORT=2222
      - GITEA__server__ROOT_URL=http://${GITEA_DOMAIN:-localhost}:3000/
      - GITEA__security__SECRET_KEY=${GITEA_SECRET_KEY:-change-in-production}
      - GITEA__security__INTERNAL_TOKEN=${GITEA_INTERNAL_TOKEN:-change-in-production}
    volumes:
      - type: volume
        source: gitea-data
        target: /var/lib/gitea
        volume:
          nocopy: false
      - type: volume
        source: gitea-config
        target: /etc/gitea
        volume:
          nocopy: false
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 200M
          mode: 0755
    ports:
      - "3000:3000"
      - "2222:2222"
    user: "1001:1001"
    security_opt:
      - no-new-privileges=true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "io.containers.autoupdate=registry"
      - "app=offline-guard"
      - "component=git"
      - "security.hardened=true"
      - "collaboration.enabled=true"

# Network Security Configuration
networks:
  frontend:
    driver: bridge
    name: offline-guard-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: og-frontend
      
  backend:
    driver: bridge
    name: offline-guard-backend
    internal: false  # Allow external for demo; set true for production
    ipam:
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: og-backend
      
  ml-network:
    driver: bridge
    name: offline-guard-ml
    internal: false  # ML may need external package access
    ipam:
      config:
        - subnet: 172.22.0.0/24
          gateway: 172.22.0.1

# Secure Volume Configuration
volumes:
  ml-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/ml-data
  
  guardian-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/guardian-data
      
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis-data
      
  gitea-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/gitea-data
      
  gitea-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/gitea-config

# Global Configuration
configs:
  nginx_config:
    external: false
    
secrets:
  discord_token:
    external: false
    
  redis_password:
    external: false